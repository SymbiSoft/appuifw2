#summary Listbox2 object, native S60 list UI control with enhanced capabilities

Listbox2 represents a native S60 listbox control. Listbox2 objects can be used with either appuifw.app.body or appuifw2.app.body property.

=== Usage ===

{{{
listbox = Listbox2(items=[], select_callback=None, double=False, icons=False, markable=False)
}}}

Creates a new Listbox2 instance.

  * *items* is a sequence of [Item] objects representing the initial listbox contents,
  * *select_callback* is a callable called when user presses the Select button,
  * *double*, if True, creates a double lined listbox instead of a single lined one,
  * *icons*, if True, adds icons displayed next to listbox entries (works with either single or double lined listboxes), in such case, the [Item] objects must provide an [Icon] object in the `icon` attribute,
  * *markable*, if True, allows the user to mark the items using the Shift key.

=== Methods ===

{{{
begin_update()
}}}

If a lot of items have to be added/updated/deleted and the listbox is currently visible, this method should be used to suppress multiple view updates. After all items have been processed, `end_update` should be called.

{{{
end_update()
}}}

Finishes processing started with `begin_update` and updates the listbox view.

{{{
clear()
}}}

Removes all items.

{{{
append(item)
}}}

Appends an item to the end of the list.

  * *item* must be an [Item] object.

{{{
extend(items)
}}}

Appends many items to the end of the list.

  * *itmes* must be a sequence of [Item] objects.

{{{
insert(position, item)
}}}

Inserts an item at given position.

  * *position* is the item position, 0 will insert the item at the top.
  * *item* must be an [Item] object.

{{{
remove(item)
}}}

Removes given item from the listbox. If the item isn't found, a `ValueError` exception is raised.

  * *item* is an [Item] object to remove.

{{{
pop([position])
}}}

Pops an item from the listbox and returns it. If position isn't specified, pops the last item. Raises an `IndexError` if the listbox is empty.

  * *position* is an optional item position, last item is popped if omitted; square brackets indicate that the argument is optional.

{{{
sort([cmpfunc])
}}}

Sorts the items in the listbox. If the compare function isn't provided, sorts alphabetically using a case-insensitive comparison of items titles and subtitles.

  * *cmpfunc* in an optional compare function receiving two [Item] objects and returning an integer; for more information refer to Python list.sort function documentation.

{{{
reverse()
}}}

Reverses the order of items in the listbox.

{{{
current()
}}}

Returns the index of currently selected item.

{{{
set_current(position)
}}}

Selects an item.

  * *position* is an index of the item to select.

{{{
current_item()
}}}

Returns the currently selected [Item] object. This is equivalent to `listbox[listbox.current()]`.

{{{
top()
}}}

Returns an index of the item visible at the top of the screen.

{{{
set_top(position)
}}}

Moves the list view so that the item at given position is visible at the top of the screen.

  * *position* is the position of the item.

{{{
top_item()
}}}

Returns the [Item] object of the item visible at the top of the screen.

{{{
bottom()
}}}

Returns an index of the item visible at the bottom of the screen.

{{{
bottom_item()
}}}

Returns the [Item] object of the item visible at the bottom of the screen.

{{{
make_visible(position)
}}}

Moves the list view so that the item at given position is visible.

  * *position* is the position of the item.

{{{
bind(event_code, callback)
}}}

Binds a callable to a key. The callable will be called when the key is pressed. The key press event is always passed to the control.

  * *event_code* is the key code, you can use codes defined in `key_codes` module,
  * *callback* is a callable to be called when the key is pressed.

{{{
marked()
}}}

Returns a list of indexes of currently marked items.

{{{
marked_items()
}}}

Returns a list of currently marked [Item] objects.

{{{
clear_marked()
}}}

Unmarks all marked items.

{{{
empty_list_text()
}}}

Returns the text displayed in the center of the screen when the list is empty.

{{{
set_empty_list_text(text)
}}}

Sets a new text displayed in the center of the screen when the list is empty.

{{{
highlight_rect()
}}}

Returns a `(left, top, width, height)` tuple representing the item selection box.

=== Remarks ===

Listbox2 class derives from Python `list` type and as such behaves like a `list` object and provides all other `list` methods for manipulation of the items. One can access and replace the items by indexing for example.