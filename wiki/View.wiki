#summary Provides an easy way to manage application views

Every more advanced !PyS60 application (or any application for that matter) needs more than one view. You pretty fast get into situation where you have to change the contents of the screen and you know you will have to restore them later. Normally in such case you have to back up all `appuifw.app` attributes, replace them with new values and restore the backed up values later. Appuifw2's views were designed to simplify such situations.

A view in appuifw2 is an object of a View class or a class derived from it. It has most of the attributes the `appuifw2.app` object provides but they are private to that one application view. May views can be created simultaneously and easily switched.

The application manages a stack of views. When a new view is set, it is added to the stack. This makes it easy to return to the previous view, simply by closing the current one. Close is always the default function of the Exit key (the Exit key label can easily be changed using the `exit_key_text` property).

The views are controlled by a single property of the [Application] object, the `appuifw2.app.view`. Assigning a view object to it adds it to the views stack and displays the view on screen. Reading yields the current view object. If no views are set, `None` is returned.

When the first view is set, the current application state is saved. It is then restored when the last view is closed.

=== Usage ===

{{{
view = View()
}}}

Creates a new View instance.

=== Methods ===

{{{
set_tabs(tab_texts, callback=None)
}}}

----

{{{
activate_tab(index)
}}}

----

{{{
close()
}}}

----

{{{
wait_for_close()
}}}

----

{{{
shown()
}}}

----

{{{
hidden()
}}}

----

{{{
init_menu()
}}}

----

{{{
handle_menu_key()
}}}

=== Properties ===

{{{
body
exit_key_handler
menu
screen
title
init_menu_handler
menu_key_handler
menu_key_text
exit_key_text
navi_text
left_navi_arrow
right_navi_arrow
}}}